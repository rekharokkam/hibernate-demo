Comparison of Data and Object Model
-----------------------------------

Identity
--------
Data Model - Primary Key
Object Model - equals()/Equal Operator to compare memory address

Associations
------------
Data Model - Foreign Keys
Object Model - Object References

Association Navigation
----------------------
Data Model - joins
Object Model - Accessors/References

Inheritance
-----------
Data Model - Not available
Object Model - Available

Challenges with JDBC
--------------------

1) Error Handling
2) Key Management
3) Implementation varies as database varies
4) Potential for errors - building the SQL queries
5) Verbose Code

There are 2 ways to annotate in JPA - Field and Property (getter method)
Field - annotated above the field
property - annotated above the getter method

When to use
-----------
Property - If the method has any business logic / validation then every time hibernate invokes the method the logic inside gets invoked.
Field - breaking encapsulation as Hibernate will access the fields that are marked as private.

There are 2 types of TYPEs




Entity Type and Value Type

Value Type further has 3 categories

1) Basic
2) Composite
3) Collection

Entity Type - are those that correspond to a database ROW and have @Id annotation. These have a database identity.

Value Type - no database Identity. No @Id annotation. They are composed with in an Entity Type. Cannot persist by itself but as part of an Entity 

	Basic Type - Correspond to one Column in a relational Database. Ex - String - first_name, last_name , Long - userId. Ex- DummyUser Class
	Composite Type - These are Types that are aggregated meaning contain other fields in them. These have no own life cycle.
		These Objects that are a collection of basic/composite/collection types. They cannot exist without an Entity Type. EX - Address Object in the Bank Class
		We cannot form relationship to it outside of Entity Class.
	Collection - Can Hold other value Types - either collection of basic types OR entity Types. Collection itself is a Value Type irrespective of what it contains



Composite Value Type - Use the below table to better Understand. Also refer to the Object DummyUser entity for Java Mappings
--------------------


Database Table Structure for USER table 
|-------------------------------------------------------|
| USER [Table Name]       								|
|-------------------------------------------------------|
|USER_ID [Primary Key]									|
|FIRST_NAME												|
|LAST_NAME												|
|REFERRED_BY_USER_ID [foreign Key to the same table]	|
|ADDRESS_LINE_1											|
|ADDRESS_LINE_2											|
|CITY													|
|STATE													|
|ZIP													|
|-------------------------------------------------------|

It is group of a bunch of fields/columns grouped together as an Object 
Called Embedded in JPA and Composite Type in Hibernate
Does not have an @Id annotation or a table of its own
Only persisted or Queries in the context of the entity Class that contains this Composite Value Type.
Data is embedded into the Source Object table.
Ex - Address class from DummyUser Entity.

Collection Value Type - Refer to bank and bank_contact tables - Java Objects refer to Bank Java Object
---------------------

Can define a collection of basic / Composite value Types.
Once we have Collection Value Type then they need to have their own table.
They have no lifecycle of their own they depend on their parent Entity life cycle.
These cannot be queried, persisted, merged independent of their parent Object
These do not have a unique identity








