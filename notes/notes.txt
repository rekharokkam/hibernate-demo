Comparison of Data and Object Model
-----------------------------------

Identity
--------
Data Model - Primary Key
Object Model - equals()/Equal Operator to compare memory address

Associations
------------
Data Model - Foreign Keys
Object Model - Object References

Association Navigation
----------------------
Data Model - joins
Object Model - Accessors/References

Inheritance
-----------
Data Model - Not available
Object Model - Available

Challenges with JDBC
--------------------

1) Error Handling
2) Key Management
3) Implementation varies as database varies
4) Potential for errors - building the SQL queries
5) Verbose Code

There are 2 ways to annotate in JPA - Field and Property (getter method)
Field - annotated above the field
property - annotated above the getter method

When to use
-----------
Property - If the method has any business logic / validation then every time hibernate invokes the method the logic inside gets invoked.
Field - breaking encapsulation as Hibernate will access the fields that are marked as private.

There are 2 types of TYPEs




Entity Type and Value Type

Value Type further has 3 categories

1) Basic
2) Composite
3) Collection

Entity Type - are those that correspond to a database ROW and have @Id annotation. These have a database identity.

Value Type - no database Identity. No @Id annotation. They are composed with in an Entity Type. Cannot persist by itself but as part of an Entity 

	Basic Type - Correspond to one Column in a relational Database. Ex - String - first_name, last_name , Long - userId. Ex- DummyUser Class
	Composite Type - These are Types that are aggregated meaning contain other fields in them. These have no own life cycle.
		These Objects that are a collection of basic/composite/collection types. They cannot exist without an Entity Type. EX - Address Object in the Bank Class
		We cannot form relationship to it outside of Entity Class.
	Collection - Can Hold other value Types - either collection of basic types OR entity Types. Collection itself is a Value Type irrespective of what it contains



Composite Value Type - Use the below table to better Understand. Also refer to the Object DummyUser entity for Java Mappings
--------------------


Database Table Structure for USER table 
|-------------------------------------------------------|
| USER [Table Name]       								|
|-------------------------------------------------------|
|USER_ID [Primary Key]									|
|FIRST_NAME												|
|LAST_NAME												|
|REFERRED_BY_USER_ID [foreign Key to the same table]	|
|ADDRESS_LINE_1											|
|ADDRESS_LINE_2											|
|CITY													|
|STATE													|
|ZIP													|
|-------------------------------------------------------|

It is group of a bunch of fields/columns grouped together as an Object 
Called Embedded in JPA and Composite Type in Hibernate
Does not have an @Id annotation or a table of its own
Only persisted or Queries in the context of the entity Class that contains this Composite Value Type.
Data is embedded into the Source Object table.
Ex - Address class from DummyUser Entity.

Collection Value Type - Refer to bank and bank_contact tables - Java Objects refer to Bank Java Object
---------------------

Can define a collection of basic / Composite value Types.
Once we have Collection Value Type then they need to have their own table.
They have no lifecycle of their own they depend on their parent Entity life cycle.
These cannot be queried, persisted, merged independent of their parent Object
These do not have a unique identity


Entity Association
------------------
Ex - Account table and Transaction Table. Transaction table has ACCOUNT_ID as the foreign key constraint to ACCOUNT table ACCOUNT_ID primary key column.
Entity - One Object mapped to a single class that has its own identity [primary Key] with in the database and it has its own lifecycle.

Entity Association - Reference from One entity to Another. Supported by underlying data model or tables that support the relationship.

Source Object/ Target Object - Any Object/table that holds the foreign key is the Source Object - Ex - Transaction. Entity whose primary key is the foreign key in another table becomes
the Target Object Ex - Account.
Account is the field type with in the Transaction Type.

BiDirectional and UniDirectional.
---------------------------------
UniDirectional
--------------
Inside Transaction Object - private Account account;
BUT Account Object has no variable for holding list of transactions.
If Source Object [Transaction in this case] has Target Object [Account Object] BUT Target Object does not have Source Object then it is UniDirectional
Ex - Transaction Object has Account Object BUT Account Object does not have List of Transactions. Account could not reach back and grab all the transactions. 
Account having List of Transactions is optional.


BiDirectional
-------------
Inside Transaction Object - private Account account;
Inside Account Object - private List<Transaction> transactions;
We can skip Account having transactions. It is useful only if we refer to all the transactions of an account.

Types of Entity Associations
----------------------------
OneToOne - One User can have one set of Credential
OneToMany - One Account can have Multiple Transactions
ManyToOne - Many Transactions can have one Account
ManyToMany - Many users can be associated with many Accounts. Husband and Wife could be operating multiple accounts.

Getting a big stack trace of PDT error with the latest mysql connector. So downgrade the version to 5.1.39 to resolve this issue.

OneToOne - Bidirectional relationship.
--------------------------------------
Never add @JoinColumn and @cascade on the non-owning entity. An entity that does not contain a foreign key But Primary Key is the non-owning entity.
@JoinColumn and @cascade are added only on the Source Object. Ex - User and Credential.
Credential is the Owning / Source Object. @JoinColumn and @Cascade are added on the Credential Entity.
User is the Non-Owning/target Object as it has no foreign key. @JoinColumn and @Cascade are not added on non-owning entity as it leads to circle of persisting each other. 


When using bi-directional relationship we need to manage both sides of relationship meaning we need to set Objects on both the Objects.
credential.setUser (User) and user.setCredential (Credential).

In case of UniDirectional OneToOne all the JPA annotations @JoinColumn and @cascade are available only on the Source Entity - Credential.
private Credential credential; is not available on the User Object, hence @OneToOne (mappedBy="user") is also not available. 

ManyToOne - OneToMany
---------------------
In case of OneToMany Unidirectional - private Account account; is not available on the Transaction Entity, hence @JoinColumn (name="ACCOUNT_ID")  is added on the Account Object.

When using bi-directional relationship we need to manage both sides of relationship meaning we need to set Objects on both the Objects.
Account.setTransactions (List<Transaction>) and Transaction.setAccount (account).


@JoinTable
----------
Join/Junction/Intersection table is created NOT ONLY for many to many relationships But also for a ONE-MANY relationship as below.
Budget to Transaction is ONE-MANY relationship.
Ex - Transaction, Budget and Budget_transaction tables. Not all Transactions have a budget Id associated with them in that case having budget_Id in the transaction table is not the right choice
For a scenario like this we create the Join table - budget_transaction so that only those transactions that are associated with budget_id are added to this table.

We can add @JoinTable on either side of the relationship but having it on the Budget table makes more sense as it follows the teacher.

@JoinTable - In the case of OneToMany relationship, Owning entity is the entity with the @JoinTable Annotation. In this case Budget Entity is the owning entity as it has @JoinTable Annotation.
You can choose which side will have @JoinTable Annotation.

CAREFUL - when you add cascade.ALL on all the entities be very careful when you add those objects for persisting.
Ex - Transaction has cascade.ALL on "account" and Account has cascade.ALL on "transactions" so when saving Account/Transaction add either Account on Transaction OR Transaction on Account.
Another example is commented - [beltPurchase.setBudget(budget);] because if this comment is removed while saving the budget Object there is cyclic dependency error.

ManyToMany - 
-----------
When we model ManyToMany UniDirectional flow we can pick any side as the owning side. Teacher picked "Account" as the owning side.
Ex - Account, User, user_account





 










